module.exports.config = {
	name: "join",
	eventType: ["log:subscribe"],
	version: "1.0.1",
	credits: "Mirai Team",
	description: "Th√¥ng b√°o bot ho·∫∑c ng∆∞·ªùi v√†o nh√≥m",
	dependencies: {
		"fs-extra": ""
	}
};

module.exports.run = async function({ api, event,Threads }) {
	const { join } = global.nodemodule["path"];
	const { threadID } = event;
	const data = (await Threads.getData(event.threadID)).data || {};
    const checkban = data.banOut || []
	if  (checkban.includes(checkban[0])) return
	else if (event.logMessageData.addedParticipants.some(i => i.userFbId == api.getCurrentUserID())) {
		api.changeNickname(`[ ${global.config.PREFIX} ] ‚Ä¢ ${(!global.config.BOTNAME) ? "Bot c·ªßa Quy·ªÅn" : global.config.BOTNAME}`, threadID, api.getCurrentUserID());
		return api.sendMessage(`¬ª ùôÜùôÄùôè ùôâùôäùôÑ ùôèùôÉùòºùôâùôÉ ùòæùôäùôâùôÇ¬´\n\n\n\n   ‚ö†Lu·∫≠t bot HXQ‚ö† \n1. C·∫•m spam nhi·ªÅu l·ªánh trong 1 ph√∫t\n2. C·∫•m 2 bot trong 1 box\n3. H·∫°n ch·∫ø menu v√† help\n4. ƒê·ª´ng c√≥ m√† ch·ª≠i bot s·∫Ω b·ªã ban vƒ©nh vi·ªÖn ‚ò†
\n  ‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ\nüìùNh·∫≠p ~info admin s·∫Ω c√≥ th√¥ng tin c·ªßa adminbot\nüìåLi√™n h·ªá khi c·∫ßn thi·∫øt\n‚öúQTV v√† th√†nh vi√™n c√≥ th·ªÉ d√πng '~help rule' ƒë·ªÉ xem h∆∞·ªõng d·∫´n v√† set b·∫£ng lu·∫≠t box\n 
 ‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ\nThis bot made by HXQ. Thank you for using\nXin c·∫£m ∆°n ƒë√£ d√†nh m·ªôt ch√∫t th·ªùi gian ƒë·ªÉ ƒë·ªçc...\n¬© Ad: Ho√†ng Xu√¢n Quy·ªÅn`, threadID);
	}
	else {
		try {
			const { createReadStream, existsSync, mkdirSync } = global.nodemodule["fs-extra"];
			let { threadName, participantIDs } = await api.getThreadInfo(threadID);

			const threadData = global.data.threadData.get(parseInt(threadID)) || {};
			const path = join(__dirname, "cache", "joinGif");
			const pathGif = join(path, `chao.gif`);

			var mentions = [], nameArray = [], memLength = [], i = 0;
			
			for (id in event.logMessageData.addedParticipants) {
				const userName = event.logMessageData.addedParticipants[id].fullName;
				nameArray.push(userName);
				mentions.push({ tag: userName, id });
				memLength.push(participantIDs.length - i++);
			}
			memLength.sort((a, b) => a - b);
			
			(typeof threadData.customJoin == "undefined") ? msg = "‚ú®Welcome {name}.\nü¶ãCh√†o m·ª´ng ƒë√£ ƒë·∫øn v·ªõi {threadName}.\nüå∏{type} l√† th√†nh vi√™n th·ª© {soThanhVien} c·ªßa nh√≥m ü•≥" : msg = threadData.customJoin;
			msg = msg
			.replace(/\{name}/g, nameArray.join(', '))
			.replace(/\{type}/g, (memLength.length > 1) ?  'c√°c b·∫°n' : 'b·∫°n')
			.replace(/\{soThanhVien}/g, memLength.join(', '))
			.replace(/\{threadName}/g, threadName);

			if (existsSync(path)) mkdirSync(path, { recursive: true });

			if (existsSync(pathGif)) formPush = { body: msg, attachment: createReadStream(pathGif), mentions }
			else formPush = { body: msg, mentions }

			return api.sendMessage(formPush, threadID);
		} catch (e) { return console.log(e) };
	}
}
